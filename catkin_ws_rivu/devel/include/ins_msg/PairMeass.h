// Generated by gencpp from file ins_msg/PairMeass.msg
// DO NOT EDIT!


#ifndef INS_MSG_MESSAGE_PAIRMEASS_H
#define INS_MSG_MESSAGE_PAIRMEASS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ins_msg
{
template <class ContainerAllocator>
struct PairMeass_
{
  typedef PairMeass_<ContainerAllocator> Type;

  PairMeass_()
    : swarm_id(0)
    , node_id(0)
    , los_flag(0)
    , stamps()
    , distance(0)
    , aoa(0)
    , pdoa1(0)
    , pdoa2(0)  {
      stamps.assign(0);
  }
  PairMeass_(const ContainerAllocator& _alloc)
    : swarm_id(0)
    , node_id(0)
    , los_flag(0)
    , stamps()
    , distance(0)
    , aoa(0)
    , pdoa1(0)
    , pdoa2(0)  {
  (void)_alloc;
      stamps.assign(0);
  }



   typedef uint16_t _swarm_id_type;
  _swarm_id_type swarm_id;

   typedef uint8_t _node_id_type;
  _node_id_type node_id;

   typedef uint8_t _los_flag_type;
  _los_flag_type los_flag;

   typedef boost::array<uint64_t, 2>  _stamps_type;
  _stamps_type stamps;

   typedef uint16_t _distance_type;
  _distance_type distance;

   typedef int16_t _aoa_type;
  _aoa_type aoa;

   typedef int16_t _pdoa1_type;
  _pdoa1_type pdoa1;

   typedef int16_t _pdoa2_type;
  _pdoa2_type pdoa2;





  typedef boost::shared_ptr< ::ins_msg::PairMeass_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ins_msg::PairMeass_<ContainerAllocator> const> ConstPtr;

}; // struct PairMeass_

typedef ::ins_msg::PairMeass_<std::allocator<void> > PairMeass;

typedef boost::shared_ptr< ::ins_msg::PairMeass > PairMeassPtr;
typedef boost::shared_ptr< ::ins_msg::PairMeass const> PairMeassConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ins_msg::PairMeass_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ins_msg::PairMeass_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ins_msg::PairMeass_<ContainerAllocator1> & lhs, const ::ins_msg::PairMeass_<ContainerAllocator2> & rhs)
{
  return lhs.swarm_id == rhs.swarm_id &&
    lhs.node_id == rhs.node_id &&
    lhs.los_flag == rhs.los_flag &&
    lhs.stamps == rhs.stamps &&
    lhs.distance == rhs.distance &&
    lhs.aoa == rhs.aoa &&
    lhs.pdoa1 == rhs.pdoa1 &&
    lhs.pdoa2 == rhs.pdoa2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ins_msg::PairMeass_<ContainerAllocator1> & lhs, const ::ins_msg::PairMeass_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ins_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ins_msg::PairMeass_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ins_msg::PairMeass_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_msg::PairMeass_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_msg::PairMeass_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_msg::PairMeass_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_msg::PairMeass_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ins_msg::PairMeass_<ContainerAllocator> >
{
  static const char* value()
  {
    return "776a952d5c4aa0b600c75e49a23de2f6";
  }

  static const char* value(const ::ins_msg::PairMeass_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x776a952d5c4aa0b6ULL;
  static const uint64_t static_value2 = 0x00c75e49a23de2f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ins_msg::PairMeass_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ins_msg/PairMeass";
  }

  static const char* value(const ::ins_msg::PairMeass_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ins_msg::PairMeass_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint16      swarm_id\n"
"uint8       node_id\n"
"uint8       los_flag\n"
"uint64[2]   stamps\n"
"\n"
"uint16      distance\n"
"int16       aoa\n"
"int16       pdoa1\n"
"int16       pdoa2\n"
"\n"
;
  }

  static const char* value(const ::ins_msg::PairMeass_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ins_msg::PairMeass_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.swarm_id);
      stream.next(m.node_id);
      stream.next(m.los_flag);
      stream.next(m.stamps);
      stream.next(m.distance);
      stream.next(m.aoa);
      stream.next(m.pdoa1);
      stream.next(m.pdoa2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PairMeass_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ins_msg::PairMeass_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ins_msg::PairMeass_<ContainerAllocator>& v)
  {
    s << indent << "swarm_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.swarm_id);
    s << indent << "node_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.node_id);
    s << indent << "los_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.los_flag);
    s << indent << "stamps[]" << std::endl;
    for (size_t i = 0; i < v.stamps.size(); ++i)
    {
      s << indent << "  stamps[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.stamps[i]);
    }
    s << indent << "distance: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.distance);
    s << indent << "aoa: ";
    Printer<int16_t>::stream(s, indent + "  ", v.aoa);
    s << indent << "pdoa1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pdoa1);
    s << indent << "pdoa2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pdoa2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INS_MSG_MESSAGE_PAIRMEASS_H
