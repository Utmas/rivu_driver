// Generated by gencpp from file ins_msg/UwbAoaDLTdoaMsg.msg
// DO NOT EDIT!


#ifndef INS_MSG_MESSAGE_UWBAOADLTDOAMSG_H
#define INS_MSG_MESSAGE_UWBAOADLTDOAMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ins_msg
{
template <class ContainerAllocator>
struct UwbAoaDLTdoaMsg_
{
  typedef UwbAoaDLTdoaMsg_<ContainerAllocator> Type;

  UwbAoaDLTdoaMsg_()
    : header()
    , utime(0)
    , dev_id(0)
    , dists()
    , aoas()
    , status(0)
    , msg_cnt(0)  {
      dists.assign(0);

      aoas.assign(0);
  }
  UwbAoaDLTdoaMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , utime(0)
    , dev_id(0)
    , dists()
    , aoas()
    , status(0)
    , msg_cnt(0)  {
  (void)_alloc;
      dists.assign(0);

      aoas.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _utime_type;
  _utime_type utime;

   typedef uint32_t _dev_id_type;
  _dev_id_type dev_id;

   typedef boost::array<uint16_t, 400>  _dists_type;
  _dists_type dists;

   typedef boost::array<uint16_t, 20>  _aoas_type;
  _aoas_type aoas;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _msg_cnt_type;
  _msg_cnt_type msg_cnt;





  typedef boost::shared_ptr< ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> const> ConstPtr;

}; // struct UwbAoaDLTdoaMsg_

typedef ::ins_msg::UwbAoaDLTdoaMsg_<std::allocator<void> > UwbAoaDLTdoaMsg;

typedef boost::shared_ptr< ::ins_msg::UwbAoaDLTdoaMsg > UwbAoaDLTdoaMsgPtr;
typedef boost::shared_ptr< ::ins_msg::UwbAoaDLTdoaMsg const> UwbAoaDLTdoaMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator1> & lhs, const ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.utime == rhs.utime &&
    lhs.dev_id == rhs.dev_id &&
    lhs.dists == rhs.dists &&
    lhs.aoas == rhs.aoas &&
    lhs.status == rhs.status &&
    lhs.msg_cnt == rhs.msg_cnt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator1> & lhs, const ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ins_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "828ed3404304c69ebe54efff42237d34";
  }

  static const char* value(const ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x828ed3404304c69eULL;
  static const uint64_t static_value2 = 0xbe54efff42237d34ULL;
};

template<class ContainerAllocator>
struct DataType< ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ins_msg/UwbAoaDLTdoaMsg";
  }

  static const char* value(const ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int64       utime\n"
"\n"
"uint32      dev_id\n"
"\n"
"uint16[400] dists\n"
"uint16[20]  aoas\n"
"\n"
"uint8       status\n"
"uint8       msg_cnt\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.utime);
      stream.next(m.dev_id);
      stream.next(m.dists);
      stream.next(m.aoas);
      stream.next(m.status);
      stream.next(m.msg_cnt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UwbAoaDLTdoaMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ins_msg::UwbAoaDLTdoaMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "utime: ";
    Printer<int64_t>::stream(s, indent + "  ", v.utime);
    s << indent << "dev_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dev_id);
    s << indent << "dists[]" << std::endl;
    for (size_t i = 0; i < v.dists.size(); ++i)
    {
      s << indent << "  dists[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.dists[i]);
    }
    s << indent << "aoas[]" << std::endl;
    for (size_t i = 0; i < v.aoas.size(); ++i)
    {
      s << indent << "  aoas[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.aoas[i]);
    }
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "msg_cnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msg_cnt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INS_MSG_MESSAGE_UWBAOADLTDOAMSG_H
