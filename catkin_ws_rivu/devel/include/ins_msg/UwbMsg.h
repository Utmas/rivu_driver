// Generated by gencpp from file ins_msg/UwbMsg.msg
// DO NOT EDIT!


#ifndef INS_MSG_MESSAGE_UWBMSG_H
#define INS_MSG_MESSAGE_UWBMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ins_msg
{
template <class ContainerAllocator>
struct UwbMsg_
{
  typedef UwbMsg_<ContainerAllocator> Type;

  UwbMsg_()
    : header()
    , utime(0)
    , anchor_serial()
    , range()
    , blinkTxTime()
    , blinkRxTime()
    , respTxTime()
    , respRxTimeStamp()
    , carrierintegrator()
    , msg_cnt(0)  {
      anchor_serial.assign(0);

      range.assign(0);

      blinkTxTime.assign(0);

      blinkRxTime.assign(0);

      respTxTime.assign(0);

      respRxTimeStamp.assign(0);

      carrierintegrator.assign(0);
  }
  UwbMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , utime(0)
    , anchor_serial()
    , range()
    , blinkTxTime()
    , blinkRxTime()
    , respTxTime()
    , respRxTimeStamp()
    , carrierintegrator()
    , msg_cnt(0)  {
  (void)_alloc;
      anchor_serial.assign(0);

      range.assign(0);

      blinkTxTime.assign(0);

      blinkRxTime.assign(0);

      respTxTime.assign(0);

      respRxTimeStamp.assign(0);

      carrierintegrator.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _utime_type;
  _utime_type utime;

   typedef boost::array<uint8_t, 8>  _anchor_serial_type;
  _anchor_serial_type anchor_serial;

   typedef boost::array<uint16_t, 8>  _range_type;
  _range_type range;

   typedef boost::array<uint64_t, 8>  _blinkTxTime_type;
  _blinkTxTime_type blinkTxTime;

   typedef boost::array<uint64_t, 8>  _blinkRxTime_type;
  _blinkRxTime_type blinkRxTime;

   typedef boost::array<uint64_t, 8>  _respTxTime_type;
  _respTxTime_type respTxTime;

   typedef boost::array<uint64_t, 8>  _respRxTimeStamp_type;
  _respRxTimeStamp_type respRxTimeStamp;

   typedef boost::array<uint64_t, 8>  _carrierintegrator_type;
  _carrierintegrator_type carrierintegrator;

   typedef uint8_t _msg_cnt_type;
  _msg_cnt_type msg_cnt;





  typedef boost::shared_ptr< ::ins_msg::UwbMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ins_msg::UwbMsg_<ContainerAllocator> const> ConstPtr;

}; // struct UwbMsg_

typedef ::ins_msg::UwbMsg_<std::allocator<void> > UwbMsg;

typedef boost::shared_ptr< ::ins_msg::UwbMsg > UwbMsgPtr;
typedef boost::shared_ptr< ::ins_msg::UwbMsg const> UwbMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ins_msg::UwbMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ins_msg::UwbMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ins_msg::UwbMsg_<ContainerAllocator1> & lhs, const ::ins_msg::UwbMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.utime == rhs.utime &&
    lhs.anchor_serial == rhs.anchor_serial &&
    lhs.range == rhs.range &&
    lhs.blinkTxTime == rhs.blinkTxTime &&
    lhs.blinkRxTime == rhs.blinkRxTime &&
    lhs.respTxTime == rhs.respTxTime &&
    lhs.respRxTimeStamp == rhs.respRxTimeStamp &&
    lhs.carrierintegrator == rhs.carrierintegrator &&
    lhs.msg_cnt == rhs.msg_cnt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ins_msg::UwbMsg_<ContainerAllocator1> & lhs, const ::ins_msg::UwbMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ins_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ins_msg::UwbMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ins_msg::UwbMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_msg::UwbMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_msg::UwbMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_msg::UwbMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_msg::UwbMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ins_msg::UwbMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ffd92547deeeddbef8f9dc9786fea207";
  }

  static const char* value(const ::ins_msg::UwbMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xffd92547deeeddbeULL;
  static const uint64_t static_value2 = 0xf8f9dc9786fea207ULL;
};

template<class ContainerAllocator>
struct DataType< ::ins_msg::UwbMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ins_msg/UwbMsg";
  }

  static const char* value(const ::ins_msg::UwbMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ins_msg::UwbMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int64 utime\n"
"\n"
"\n"
"uint8[8] anchor_serial\n"
"uint16[8] range\n"
"\n"
"\n"
"uint64[8] blinkTxTime\n"
"uint64[8] blinkRxTime\n"
"uint64[8] respTxTime\n"
"uint64[8] respRxTimeStamp\n"
"uint64[8] carrierintegrator\n"
"\n"
"uint8 msg_cnt\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ins_msg::UwbMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ins_msg::UwbMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.utime);
      stream.next(m.anchor_serial);
      stream.next(m.range);
      stream.next(m.blinkTxTime);
      stream.next(m.blinkRxTime);
      stream.next(m.respTxTime);
      stream.next(m.respRxTimeStamp);
      stream.next(m.carrierintegrator);
      stream.next(m.msg_cnt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UwbMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ins_msg::UwbMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ins_msg::UwbMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "utime: ";
    Printer<int64_t>::stream(s, indent + "  ", v.utime);
    s << indent << "anchor_serial[]" << std::endl;
    for (size_t i = 0; i < v.anchor_serial.size(); ++i)
    {
      s << indent << "  anchor_serial[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.anchor_serial[i]);
    }
    s << indent << "range[]" << std::endl;
    for (size_t i = 0; i < v.range.size(); ++i)
    {
      s << indent << "  range[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.range[i]);
    }
    s << indent << "blinkTxTime[]" << std::endl;
    for (size_t i = 0; i < v.blinkTxTime.size(); ++i)
    {
      s << indent << "  blinkTxTime[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.blinkTxTime[i]);
    }
    s << indent << "blinkRxTime[]" << std::endl;
    for (size_t i = 0; i < v.blinkRxTime.size(); ++i)
    {
      s << indent << "  blinkRxTime[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.blinkRxTime[i]);
    }
    s << indent << "respTxTime[]" << std::endl;
    for (size_t i = 0; i < v.respTxTime.size(); ++i)
    {
      s << indent << "  respTxTime[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.respTxTime[i]);
    }
    s << indent << "respRxTimeStamp[]" << std::endl;
    for (size_t i = 0; i < v.respRxTimeStamp.size(); ++i)
    {
      s << indent << "  respRxTimeStamp[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.respRxTimeStamp[i]);
    }
    s << indent << "carrierintegrator[]" << std::endl;
    for (size_t i = 0; i < v.carrierintegrator.size(); ++i)
    {
      s << indent << "  carrierintegrator[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.carrierintegrator[i]);
    }
    s << indent << "msg_cnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msg_cnt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INS_MSG_MESSAGE_UWBMSG_H
