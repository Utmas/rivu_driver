// Generated by gencpp from file ins_msg/UwbPos.msg
// DO NOT EDIT!


#ifndef INS_MSG_MESSAGE_UWBPOS_H
#define INS_MSG_MESSAGE_UWBPOS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ins_msg
{
template <class ContainerAllocator>
struct UwbPos_
{
  typedef UwbPos_<ContainerAllocator> Type;

  UwbPos_()
    : dev_id(0)
    , pos()
    , cov()  {
      pos.assign(0.0);

      cov.assign(0.0);
  }
  UwbPos_(const ContainerAllocator& _alloc)
    : dev_id(0)
    , pos()
    , cov()  {
  (void)_alloc;
      pos.assign(0.0);

      cov.assign(0.0);
  }



   typedef uint32_t _dev_id_type;
  _dev_id_type dev_id;

   typedef boost::array<float, 3>  _pos_type;
  _pos_type pos;

   typedef boost::array<float, 6>  _cov_type;
  _cov_type cov;





  typedef boost::shared_ptr< ::ins_msg::UwbPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ins_msg::UwbPos_<ContainerAllocator> const> ConstPtr;

}; // struct UwbPos_

typedef ::ins_msg::UwbPos_<std::allocator<void> > UwbPos;

typedef boost::shared_ptr< ::ins_msg::UwbPos > UwbPosPtr;
typedef boost::shared_ptr< ::ins_msg::UwbPos const> UwbPosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ins_msg::UwbPos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ins_msg::UwbPos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ins_msg::UwbPos_<ContainerAllocator1> & lhs, const ::ins_msg::UwbPos_<ContainerAllocator2> & rhs)
{
  return lhs.dev_id == rhs.dev_id &&
    lhs.pos == rhs.pos &&
    lhs.cov == rhs.cov;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ins_msg::UwbPos_<ContainerAllocator1> & lhs, const ::ins_msg::UwbPos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ins_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ins_msg::UwbPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ins_msg::UwbPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_msg::UwbPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_msg::UwbPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_msg::UwbPos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_msg::UwbPos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ins_msg::UwbPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6aff7b7e64b76ac4c0149132212ab48";
  }

  static const char* value(const ::ins_msg::UwbPos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6aff7b7e64b76acULL;
  static const uint64_t static_value2 = 0x4c0149132212ab48ULL;
};

template<class ContainerAllocator>
struct DataType< ::ins_msg::UwbPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ins_msg/UwbPos";
  }

  static const char* value(const ::ins_msg::UwbPos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ins_msg::UwbPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32     dev_id\n"
"float32[3] pos\n"
"float32[6] cov\n"
;
  }

  static const char* value(const ::ins_msg::UwbPos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ins_msg::UwbPos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dev_id);
      stream.next(m.pos);
      stream.next(m.cov);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UwbPos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ins_msg::UwbPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ins_msg::UwbPos_<ContainerAllocator>& v)
  {
    s << indent << "dev_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dev_id);
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "cov[]" << std::endl;
    for (size_t i = 0; i < v.cov.size(); ++i)
    {
      s << indent << "  cov[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cov[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // INS_MSG_MESSAGE_UWBPOS_H
