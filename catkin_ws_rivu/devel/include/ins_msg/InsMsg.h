// Generated by gencpp from file ins_msg/InsMsg.msg
// DO NOT EDIT!


#ifndef INS_MSG_MESSAGE_INSMSG_H
#define INS_MSG_MESSAGE_INSMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ins_msg
{
template <class ContainerAllocator>
struct InsMsg_
{
  typedef InsMsg_<ContainerAllocator> Type;

  InsMsg_()
    : header()
    , utime(0)
    , longitude(0.0)
    , latitude(0.0)
    , height(0.0)
    , ve(0.0)
    , vn(0.0)
    , vu(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , msg_cnt(0)  {
    }
  InsMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , utime(0)
    , longitude(0.0)
    , latitude(0.0)
    , height(0.0)
    , ve(0.0)
    , vn(0.0)
    , vu(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , msg_cnt(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _utime_type;
  _utime_type utime;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _height_type;
  _height_type height;

   typedef double _ve_type;
  _ve_type ve;

   typedef double _vn_type;
  _vn_type vn;

   typedef double _vu_type;
  _vu_type vu;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef uint8_t _msg_cnt_type;
  _msg_cnt_type msg_cnt;





  typedef boost::shared_ptr< ::ins_msg::InsMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ins_msg::InsMsg_<ContainerAllocator> const> ConstPtr;

}; // struct InsMsg_

typedef ::ins_msg::InsMsg_<std::allocator<void> > InsMsg;

typedef boost::shared_ptr< ::ins_msg::InsMsg > InsMsgPtr;
typedef boost::shared_ptr< ::ins_msg::InsMsg const> InsMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ins_msg::InsMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ins_msg::InsMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ins_msg::InsMsg_<ContainerAllocator1> & lhs, const ::ins_msg::InsMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.utime == rhs.utime &&
    lhs.longitude == rhs.longitude &&
    lhs.latitude == rhs.latitude &&
    lhs.height == rhs.height &&
    lhs.ve == rhs.ve &&
    lhs.vn == rhs.vn &&
    lhs.vu == rhs.vu &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.msg_cnt == rhs.msg_cnt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ins_msg::InsMsg_<ContainerAllocator1> & lhs, const ::ins_msg::InsMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ins_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ins_msg::InsMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ins_msg::InsMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_msg::InsMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_msg::InsMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_msg::InsMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_msg::InsMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ins_msg::InsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7eaa178457b9b44717ef05843690a4a";
  }

  static const char* value(const ::ins_msg::InsMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7eaa178457b9b44ULL;
  static const uint64_t static_value2 = 0x717ef05843690a4aULL;
};

template<class ContainerAllocator>
struct DataType< ::ins_msg::InsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ins_msg/InsMsg";
  }

  static const char* value(const ::ins_msg::InsMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ins_msg::InsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int64 utime\n"
"\n"
"float64 longitude\n"
"float64 latitude\n"
"float64 height\n"
"float64 ve\n"
"float64 vn\n"
"float64 vu\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"uint8 msg_cnt\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ins_msg::InsMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ins_msg::InsMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.utime);
      stream.next(m.longitude);
      stream.next(m.latitude);
      stream.next(m.height);
      stream.next(m.ve);
      stream.next(m.vn);
      stream.next(m.vu);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.msg_cnt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InsMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ins_msg::InsMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ins_msg::InsMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "utime: ";
    Printer<int64_t>::stream(s, indent + "  ", v.utime);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "ve: ";
    Printer<double>::stream(s, indent + "  ", v.ve);
    s << indent << "vn: ";
    Printer<double>::stream(s, indent + "  ", v.vn);
    s << indent << "vu: ";
    Printer<double>::stream(s, indent + "  ", v.vu);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "msg_cnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msg_cnt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INS_MSG_MESSAGE_INSMSG_H
