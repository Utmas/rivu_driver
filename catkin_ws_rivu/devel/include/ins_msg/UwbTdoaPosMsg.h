// Generated by gencpp from file ins_msg/UwbTdoaPosMsg.msg
// DO NOT EDIT!


#ifndef INS_MSG_MESSAGE_UWBTDOAPOSMSG_H
#define INS_MSG_MESSAGE_UWBTDOAPOSMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ins_msg
{
template <class ContainerAllocator>
struct UwbTdoaPosMsg_
{
  typedef UwbTdoaPosMsg_<ContainerAllocator> Type;

  UwbTdoaPosMsg_()
    : header()
    , utime(0)
    , tagID(0)
    , position_x(0)
    , position_y(0)
    , position_z(0)
    , msg_cnt(0)  {
    }
  UwbTdoaPosMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , utime(0)
    , tagID(0)
    , position_x(0)
    , position_y(0)
    , position_z(0)
    , msg_cnt(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _utime_type;
  _utime_type utime;

   typedef uint8_t _tagID_type;
  _tagID_type tagID;

   typedef uint32_t _position_x_type;
  _position_x_type position_x;

   typedef uint32_t _position_y_type;
  _position_y_type position_y;

   typedef uint32_t _position_z_type;
  _position_z_type position_z;

   typedef uint8_t _msg_cnt_type;
  _msg_cnt_type msg_cnt;





  typedef boost::shared_ptr< ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> const> ConstPtr;

}; // struct UwbTdoaPosMsg_

typedef ::ins_msg::UwbTdoaPosMsg_<std::allocator<void> > UwbTdoaPosMsg;

typedef boost::shared_ptr< ::ins_msg::UwbTdoaPosMsg > UwbTdoaPosMsgPtr;
typedef boost::shared_ptr< ::ins_msg::UwbTdoaPosMsg const> UwbTdoaPosMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator1> & lhs, const ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.utime == rhs.utime &&
    lhs.tagID == rhs.tagID &&
    lhs.position_x == rhs.position_x &&
    lhs.position_y == rhs.position_y &&
    lhs.position_z == rhs.position_z &&
    lhs.msg_cnt == rhs.msg_cnt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator1> & lhs, const ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ins_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e21e1d55bc631d4c24f529d0745ed3a";
  }

  static const char* value(const ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e21e1d55bc631d4ULL;
  static const uint64_t static_value2 = 0xc24f529d0745ed3aULL;
};

template<class ContainerAllocator>
struct DataType< ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ins_msg/UwbTdoaPosMsg";
  }

  static const char* value(const ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int64 utime\n"
"\n"
"\n"
"uint8 tagID\n"
"uint32 position_x\n"
"uint32 position_y\n"
"uint32 position_z\n"
"\n"
"uint8 msg_cnt\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.utime);
      stream.next(m.tagID);
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.position_z);
      stream.next(m.msg_cnt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UwbTdoaPosMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ins_msg::UwbTdoaPosMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "utime: ";
    Printer<int64_t>::stream(s, indent + "  ", v.utime);
    s << indent << "tagID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tagID);
    s << indent << "position_x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.position_y);
    s << indent << "position_z: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.position_z);
    s << indent << "msg_cnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msg_cnt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INS_MSG_MESSAGE_UWBTDOAPOSMSG_H
