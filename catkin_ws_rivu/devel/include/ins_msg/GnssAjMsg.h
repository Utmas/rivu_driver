// Generated by gencpp from file ins_msg/GnssAjMsg.msg
// DO NOT EDIT!


#ifndef INS_MSG_MESSAGE_GNSSAJMSG_H
#define INS_MSG_MESSAGE_GNSSAJMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ins_msg
{
template <class ContainerAllocator>
struct GnssAjMsg_
{
  typedef GnssAjMsg_<ContainerAllocator> Type;

  GnssAjMsg_()
    : header()
    , utime(0)
    , pos_type(0)
    , meas_enable(0)
    , GNSS_mask(0)
    , ant_num(0)
    , sv_num_tracked(0)
    , sv_num_used(0)
    , diff_age(0)
    , sol_age(0)
    , ms(0.0)
    , longitude(0.0)
    , latitude(0.0)
    , height(0.0)
    , ve(0.0)
    , vn(0.0)
    , vu(0.0)
    , roll(0.0)
    , pitch(0.0)
    , heading(0.0)
    , std_longitude(0.0)
    , std_latitude(0.0)
    , std_height(0.0)
    , std_ve(0.0)
    , std_vn(0.0)
    , std_vu(0.0)
    , std_roll(0.0)
    , std_pitch(0.0)
    , std_heading(0.0)
    , undulation(0.0)
    , baseline_length(0.0)
    , chan_valid()
    , chan_svid()
    , chan_plllock()
    , chan_cn0()
    , chan_pseudoRange()
    , chan_carrPhase()
    , msg_cnt(0)  {
      chan_valid.assign(0);

      chan_svid.assign(0);

      chan_plllock.assign(0.0);

      chan_cn0.assign(0.0);

      chan_pseudoRange.assign(0.0);

      chan_carrPhase.assign(0.0);
  }
  GnssAjMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , utime(0)
    , pos_type(0)
    , meas_enable(0)
    , GNSS_mask(0)
    , ant_num(0)
    , sv_num_tracked(0)
    , sv_num_used(0)
    , diff_age(0)
    , sol_age(0)
    , ms(0.0)
    , longitude(0.0)
    , latitude(0.0)
    , height(0.0)
    , ve(0.0)
    , vn(0.0)
    , vu(0.0)
    , roll(0.0)
    , pitch(0.0)
    , heading(0.0)
    , std_longitude(0.0)
    , std_latitude(0.0)
    , std_height(0.0)
    , std_ve(0.0)
    , std_vn(0.0)
    , std_vu(0.0)
    , std_roll(0.0)
    , std_pitch(0.0)
    , std_heading(0.0)
    , undulation(0.0)
    , baseline_length(0.0)
    , chan_valid()
    , chan_svid()
    , chan_plllock()
    , chan_cn0()
    , chan_pseudoRange()
    , chan_carrPhase()
    , msg_cnt(0)  {
  (void)_alloc;
      chan_valid.assign(0);

      chan_svid.assign(0);

      chan_plllock.assign(0.0);

      chan_cn0.assign(0.0);

      chan_pseudoRange.assign(0.0);

      chan_carrPhase.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _utime_type;
  _utime_type utime;

   typedef uint8_t _pos_type_type;
  _pos_type_type pos_type;

   typedef uint8_t _meas_enable_type;
  _meas_enable_type meas_enable;

   typedef uint8_t _GNSS_mask_type;
  _GNSS_mask_type GNSS_mask;

   typedef uint8_t _ant_num_type;
  _ant_num_type ant_num;

   typedef uint8_t _sv_num_tracked_type;
  _sv_num_tracked_type sv_num_tracked;

   typedef uint8_t _sv_num_used_type;
  _sv_num_used_type sv_num_used;

   typedef uint8_t _diff_age_type;
  _diff_age_type diff_age;

   typedef uint8_t _sol_age_type;
  _sol_age_type sol_age;

   typedef double _ms_type;
  _ms_type ms;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _height_type;
  _height_type height;

   typedef double _ve_type;
  _ve_type ve;

   typedef double _vn_type;
  _vn_type vn;

   typedef double _vu_type;
  _vu_type vu;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _std_longitude_type;
  _std_longitude_type std_longitude;

   typedef double _std_latitude_type;
  _std_latitude_type std_latitude;

   typedef double _std_height_type;
  _std_height_type std_height;

   typedef double _std_ve_type;
  _std_ve_type std_ve;

   typedef double _std_vn_type;
  _std_vn_type std_vn;

   typedef double _std_vu_type;
  _std_vu_type std_vu;

   typedef double _std_roll_type;
  _std_roll_type std_roll;

   typedef double _std_pitch_type;
  _std_pitch_type std_pitch;

   typedef double _std_heading_type;
  _std_heading_type std_heading;

   typedef double _undulation_type;
  _undulation_type undulation;

   typedef double _baseline_length_type;
  _baseline_length_type baseline_length;

   typedef boost::array<uint8_t, 48>  _chan_valid_type;
  _chan_valid_type chan_valid;

   typedef boost::array<uint8_t, 48>  _chan_svid_type;
  _chan_svid_type chan_svid;

   typedef boost::array<float, 48>  _chan_plllock_type;
  _chan_plllock_type chan_plllock;

   typedef boost::array<float, 48>  _chan_cn0_type;
  _chan_cn0_type chan_cn0;

   typedef boost::array<double, 48>  _chan_pseudoRange_type;
  _chan_pseudoRange_type chan_pseudoRange;

   typedef boost::array<double, 48>  _chan_carrPhase_type;
  _chan_carrPhase_type chan_carrPhase;

   typedef uint8_t _msg_cnt_type;
  _msg_cnt_type msg_cnt;





  typedef boost::shared_ptr< ::ins_msg::GnssAjMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ins_msg::GnssAjMsg_<ContainerAllocator> const> ConstPtr;

}; // struct GnssAjMsg_

typedef ::ins_msg::GnssAjMsg_<std::allocator<void> > GnssAjMsg;

typedef boost::shared_ptr< ::ins_msg::GnssAjMsg > GnssAjMsgPtr;
typedef boost::shared_ptr< ::ins_msg::GnssAjMsg const> GnssAjMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ins_msg::GnssAjMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ins_msg::GnssAjMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ins_msg::GnssAjMsg_<ContainerAllocator1> & lhs, const ::ins_msg::GnssAjMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.utime == rhs.utime &&
    lhs.pos_type == rhs.pos_type &&
    lhs.meas_enable == rhs.meas_enable &&
    lhs.GNSS_mask == rhs.GNSS_mask &&
    lhs.ant_num == rhs.ant_num &&
    lhs.sv_num_tracked == rhs.sv_num_tracked &&
    lhs.sv_num_used == rhs.sv_num_used &&
    lhs.diff_age == rhs.diff_age &&
    lhs.sol_age == rhs.sol_age &&
    lhs.ms == rhs.ms &&
    lhs.longitude == rhs.longitude &&
    lhs.latitude == rhs.latitude &&
    lhs.height == rhs.height &&
    lhs.ve == rhs.ve &&
    lhs.vn == rhs.vn &&
    lhs.vu == rhs.vu &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.heading == rhs.heading &&
    lhs.std_longitude == rhs.std_longitude &&
    lhs.std_latitude == rhs.std_latitude &&
    lhs.std_height == rhs.std_height &&
    lhs.std_ve == rhs.std_ve &&
    lhs.std_vn == rhs.std_vn &&
    lhs.std_vu == rhs.std_vu &&
    lhs.std_roll == rhs.std_roll &&
    lhs.std_pitch == rhs.std_pitch &&
    lhs.std_heading == rhs.std_heading &&
    lhs.undulation == rhs.undulation &&
    lhs.baseline_length == rhs.baseline_length &&
    lhs.chan_valid == rhs.chan_valid &&
    lhs.chan_svid == rhs.chan_svid &&
    lhs.chan_plllock == rhs.chan_plllock &&
    lhs.chan_cn0 == rhs.chan_cn0 &&
    lhs.chan_pseudoRange == rhs.chan_pseudoRange &&
    lhs.chan_carrPhase == rhs.chan_carrPhase &&
    lhs.msg_cnt == rhs.msg_cnt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ins_msg::GnssAjMsg_<ContainerAllocator1> & lhs, const ::ins_msg::GnssAjMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ins_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ins_msg::GnssAjMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ins_msg::GnssAjMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_msg::GnssAjMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ins_msg::GnssAjMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_msg::GnssAjMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ins_msg::GnssAjMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ins_msg::GnssAjMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af6424f77909d0493d683711d8a26092";
  }

  static const char* value(const ::ins_msg::GnssAjMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf6424f77909d049ULL;
  static const uint64_t static_value2 = 0x3d683711d8a26092ULL;
};

template<class ContainerAllocator>
struct DataType< ::ins_msg::GnssAjMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ins_msg/GnssAjMsg";
  }

  static const char* value(const ::ins_msg::GnssAjMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ins_msg::GnssAjMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int64 utime\n"
"\n"
"\n"
"uint8 pos_type 			# 0:NONE, 1:SP_2D, 2:SP_3D, 3:DGPS, 4:RTK_float, 5:RTK_fix\n"
"uint8 meas_enable 		# bit0:pos, bit1:vel, bit2:roll, bit3:pitch, bit4:heading, bit5~7:unused\n"
"uint8 GNSS_mask 		# 0~8 bit for GPS, GLONASS, BDS, Galileo, QZSS, RNSS, SBAS, PSAT\n"
"uint8 ant_num\n"
"uint8 sv_num_tracked\n"
"uint8 sv_num_used\n"
"uint8 diff_age\n"
"uint8 sol_age\n"
"\n"
"float64 ms          	# Milliseconds from the beginning of the GPS reference week\n"
"float64 longitude\n"
"float64 latitude\n"
"float64 height\n"
"float64 ve\n"
"float64 vn\n"
"float64 vu\n"
"float64 roll\n"
"float64 pitch\n"
"float64 heading\n"
"\n"
"float64 std_longitude\n"
"float64 std_latitude\n"
"float64 std_height\n"
"float64 std_ve\n"
"float64 std_vn\n"
"float64 std_vu\n"
"float64 std_roll\n"
"float64 std_pitch\n"
"float64 std_heading\n"
"\n"
"float64 undulation\n"
"float64 baseline_length\n"
"\n"
"uint8[48] chan_valid         # chan valid\n"
"uint8[48] chan_svid          # chan svid\n"
"float32[48] chan_plllock         # chan plllock\n"
"float32[48] chan_cn0             # chan cn0\n"
"float64[48] chan_pseudoRange    # chan pseudoRange\n"
"float64[48] chan_carrPhase      # chan carrPhase\n"
"\n"
"uint8 msg_cnt\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ins_msg::GnssAjMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ins_msg::GnssAjMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.utime);
      stream.next(m.pos_type);
      stream.next(m.meas_enable);
      stream.next(m.GNSS_mask);
      stream.next(m.ant_num);
      stream.next(m.sv_num_tracked);
      stream.next(m.sv_num_used);
      stream.next(m.diff_age);
      stream.next(m.sol_age);
      stream.next(m.ms);
      stream.next(m.longitude);
      stream.next(m.latitude);
      stream.next(m.height);
      stream.next(m.ve);
      stream.next(m.vn);
      stream.next(m.vu);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.heading);
      stream.next(m.std_longitude);
      stream.next(m.std_latitude);
      stream.next(m.std_height);
      stream.next(m.std_ve);
      stream.next(m.std_vn);
      stream.next(m.std_vu);
      stream.next(m.std_roll);
      stream.next(m.std_pitch);
      stream.next(m.std_heading);
      stream.next(m.undulation);
      stream.next(m.baseline_length);
      stream.next(m.chan_valid);
      stream.next(m.chan_svid);
      stream.next(m.chan_plllock);
      stream.next(m.chan_cn0);
      stream.next(m.chan_pseudoRange);
      stream.next(m.chan_carrPhase);
      stream.next(m.msg_cnt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GnssAjMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ins_msg::GnssAjMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ins_msg::GnssAjMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "utime: ";
    Printer<int64_t>::stream(s, indent + "  ", v.utime);
    s << indent << "pos_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pos_type);
    s << indent << "meas_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.meas_enable);
    s << indent << "GNSS_mask: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GNSS_mask);
    s << indent << "ant_num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ant_num);
    s << indent << "sv_num_tracked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sv_num_tracked);
    s << indent << "sv_num_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sv_num_used);
    s << indent << "diff_age: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.diff_age);
    s << indent << "sol_age: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sol_age);
    s << indent << "ms: ";
    Printer<double>::stream(s, indent + "  ", v.ms);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "ve: ";
    Printer<double>::stream(s, indent + "  ", v.ve);
    s << indent << "vn: ";
    Printer<double>::stream(s, indent + "  ", v.vn);
    s << indent << "vu: ";
    Printer<double>::stream(s, indent + "  ", v.vu);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "std_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.std_longitude);
    s << indent << "std_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.std_latitude);
    s << indent << "std_height: ";
    Printer<double>::stream(s, indent + "  ", v.std_height);
    s << indent << "std_ve: ";
    Printer<double>::stream(s, indent + "  ", v.std_ve);
    s << indent << "std_vn: ";
    Printer<double>::stream(s, indent + "  ", v.std_vn);
    s << indent << "std_vu: ";
    Printer<double>::stream(s, indent + "  ", v.std_vu);
    s << indent << "std_roll: ";
    Printer<double>::stream(s, indent + "  ", v.std_roll);
    s << indent << "std_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.std_pitch);
    s << indent << "std_heading: ";
    Printer<double>::stream(s, indent + "  ", v.std_heading);
    s << indent << "undulation: ";
    Printer<double>::stream(s, indent + "  ", v.undulation);
    s << indent << "baseline_length: ";
    Printer<double>::stream(s, indent + "  ", v.baseline_length);
    s << indent << "chan_valid[]" << std::endl;
    for (size_t i = 0; i < v.chan_valid.size(); ++i)
    {
      s << indent << "  chan_valid[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.chan_valid[i]);
    }
    s << indent << "chan_svid[]" << std::endl;
    for (size_t i = 0; i < v.chan_svid.size(); ++i)
    {
      s << indent << "  chan_svid[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.chan_svid[i]);
    }
    s << indent << "chan_plllock[]" << std::endl;
    for (size_t i = 0; i < v.chan_plllock.size(); ++i)
    {
      s << indent << "  chan_plllock[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.chan_plllock[i]);
    }
    s << indent << "chan_cn0[]" << std::endl;
    for (size_t i = 0; i < v.chan_cn0.size(); ++i)
    {
      s << indent << "  chan_cn0[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.chan_cn0[i]);
    }
    s << indent << "chan_pseudoRange[]" << std::endl;
    for (size_t i = 0; i < v.chan_pseudoRange.size(); ++i)
    {
      s << indent << "  chan_pseudoRange[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.chan_pseudoRange[i]);
    }
    s << indent << "chan_carrPhase[]" << std::endl;
    for (size_t i = 0; i < v.chan_carrPhase.size(); ++i)
    {
      s << indent << "  chan_carrPhase[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.chan_carrPhase[i]);
    }
    s << indent << "msg_cnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msg_cnt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INS_MSG_MESSAGE_GNSSAJMSG_H
