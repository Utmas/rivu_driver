# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ins_msg/GnssAjMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GnssAjMsg(genpy.Message):
  _md5sum = "af6424f77909d0493d683711d8a26092"
  _type = "ins_msg/GnssAjMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

int64 utime


uint8 pos_type 			# 0:NONE, 1:SP_2D, 2:SP_3D, 3:DGPS, 4:RTK_float, 5:RTK_fix
uint8 meas_enable 		# bit0:pos, bit1:vel, bit2:roll, bit3:pitch, bit4:heading, bit5~7:unused
uint8 GNSS_mask 		# 0~8 bit for GPS, GLONASS, BDS, Galileo, QZSS, RNSS, SBAS, PSAT
uint8 ant_num
uint8 sv_num_tracked
uint8 sv_num_used
uint8 diff_age
uint8 sol_age

float64 ms          	# Milliseconds from the beginning of the GPS reference week
float64 longitude
float64 latitude
float64 height
float64 ve
float64 vn
float64 vu
float64 roll
float64 pitch
float64 heading

float64 std_longitude
float64 std_latitude
float64 std_height
float64 std_ve
float64 std_vn
float64 std_vu
float64 std_roll
float64 std_pitch
float64 std_heading

float64 undulation
float64 baseline_length

uint8[48] chan_valid         # chan valid
uint8[48] chan_svid          # chan svid
float32[48] chan_plllock         # chan plllock
float32[48] chan_cn0             # chan cn0
float64[48] chan_pseudoRange    # chan pseudoRange
float64[48] chan_carrPhase      # chan carrPhase

uint8 msg_cnt





================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','utime','pos_type','meas_enable','GNSS_mask','ant_num','sv_num_tracked','sv_num_used','diff_age','sol_age','ms','longitude','latitude','height','ve','vn','vu','roll','pitch','heading','std_longitude','std_latitude','std_height','std_ve','std_vn','std_vu','std_roll','std_pitch','std_heading','undulation','baseline_length','chan_valid','chan_svid','chan_plllock','chan_cn0','chan_pseudoRange','chan_carrPhase','msg_cnt']
  _slot_types = ['std_msgs/Header','int64','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','uint8[48]','uint8[48]','float32[48]','float32[48]','float64[48]','float64[48]','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,utime,pos_type,meas_enable,GNSS_mask,ant_num,sv_num_tracked,sv_num_used,diff_age,sol_age,ms,longitude,latitude,height,ve,vn,vu,roll,pitch,heading,std_longitude,std_latitude,std_height,std_ve,std_vn,std_vu,std_roll,std_pitch,std_heading,undulation,baseline_length,chan_valid,chan_svid,chan_plllock,chan_cn0,chan_pseudoRange,chan_carrPhase,msg_cnt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GnssAjMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.utime is None:
        self.utime = 0
      if self.pos_type is None:
        self.pos_type = 0
      if self.meas_enable is None:
        self.meas_enable = 0
      if self.GNSS_mask is None:
        self.GNSS_mask = 0
      if self.ant_num is None:
        self.ant_num = 0
      if self.sv_num_tracked is None:
        self.sv_num_tracked = 0
      if self.sv_num_used is None:
        self.sv_num_used = 0
      if self.diff_age is None:
        self.diff_age = 0
      if self.sol_age is None:
        self.sol_age = 0
      if self.ms is None:
        self.ms = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.height is None:
        self.height = 0.
      if self.ve is None:
        self.ve = 0.
      if self.vn is None:
        self.vn = 0.
      if self.vu is None:
        self.vu = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.heading is None:
        self.heading = 0.
      if self.std_longitude is None:
        self.std_longitude = 0.
      if self.std_latitude is None:
        self.std_latitude = 0.
      if self.std_height is None:
        self.std_height = 0.
      if self.std_ve is None:
        self.std_ve = 0.
      if self.std_vn is None:
        self.std_vn = 0.
      if self.std_vu is None:
        self.std_vu = 0.
      if self.std_roll is None:
        self.std_roll = 0.
      if self.std_pitch is None:
        self.std_pitch = 0.
      if self.std_heading is None:
        self.std_heading = 0.
      if self.undulation is None:
        self.undulation = 0.
      if self.baseline_length is None:
        self.baseline_length = 0.
      if self.chan_valid is None:
        self.chan_valid = b'\0'*48
      if self.chan_svid is None:
        self.chan_svid = b'\0'*48
      if self.chan_plllock is None:
        self.chan_plllock = [0.] * 48
      if self.chan_cn0 is None:
        self.chan_cn0 = [0.] * 48
      if self.chan_pseudoRange is None:
        self.chan_pseudoRange = [0.] * 48
      if self.chan_carrPhase is None:
        self.chan_carrPhase = [0.] * 48
      if self.msg_cnt is None:
        self.msg_cnt = 0
    else:
      self.header = std_msgs.msg.Header()
      self.utime = 0
      self.pos_type = 0
      self.meas_enable = 0
      self.GNSS_mask = 0
      self.ant_num = 0
      self.sv_num_tracked = 0
      self.sv_num_used = 0
      self.diff_age = 0
      self.sol_age = 0
      self.ms = 0.
      self.longitude = 0.
      self.latitude = 0.
      self.height = 0.
      self.ve = 0.
      self.vn = 0.
      self.vu = 0.
      self.roll = 0.
      self.pitch = 0.
      self.heading = 0.
      self.std_longitude = 0.
      self.std_latitude = 0.
      self.std_height = 0.
      self.std_ve = 0.
      self.std_vn = 0.
      self.std_vu = 0.
      self.std_roll = 0.
      self.std_pitch = 0.
      self.std_heading = 0.
      self.undulation = 0.
      self.baseline_length = 0.
      self.chan_valid = b'\0'*48
      self.chan_svid = b'\0'*48
      self.chan_plllock = [0.] * 48
      self.chan_cn0 = [0.] * 48
      self.chan_pseudoRange = [0.] * 48
      self.chan_carrPhase = [0.] * 48
      self.msg_cnt = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_q8B21d().pack(_x.utime, _x.pos_type, _x.meas_enable, _x.GNSS_mask, _x.ant_num, _x.sv_num_tracked, _x.sv_num_used, _x.diff_age, _x.sol_age, _x.ms, _x.longitude, _x.latitude, _x.height, _x.ve, _x.vn, _x.vu, _x.roll, _x.pitch, _x.heading, _x.std_longitude, _x.std_latitude, _x.std_height, _x.std_ve, _x.std_vn, _x.std_vu, _x.std_roll, _x.std_pitch, _x.std_heading, _x.undulation, _x.baseline_length))
      _x = self.chan_valid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_48B().pack(*_x))
      else:
        buff.write(_get_struct_48s().pack(_x))
      _x = self.chan_svid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_48B().pack(*_x))
      else:
        buff.write(_get_struct_48s().pack(_x))
      buff.write(_get_struct_48f().pack(*self.chan_plllock))
      buff.write(_get_struct_48f().pack(*self.chan_cn0))
      buff.write(_get_struct_48d().pack(*self.chan_pseudoRange))
      buff.write(_get_struct_48d().pack(*self.chan_carrPhase))
      _x = self.msg_cnt
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 184
      (_x.utime, _x.pos_type, _x.meas_enable, _x.GNSS_mask, _x.ant_num, _x.sv_num_tracked, _x.sv_num_used, _x.diff_age, _x.sol_age, _x.ms, _x.longitude, _x.latitude, _x.height, _x.ve, _x.vn, _x.vu, _x.roll, _x.pitch, _x.heading, _x.std_longitude, _x.std_latitude, _x.std_height, _x.std_ve, _x.std_vn, _x.std_vu, _x.std_roll, _x.std_pitch, _x.std_heading, _x.undulation, _x.baseline_length,) = _get_struct_q8B21d().unpack(str[start:end])
      start = end
      end += 48
      self.chan_valid = str[start:end]
      start = end
      end += 48
      self.chan_svid = str[start:end]
      start = end
      end += 192
      self.chan_plllock = _get_struct_48f().unpack(str[start:end])
      start = end
      end += 192
      self.chan_cn0 = _get_struct_48f().unpack(str[start:end])
      start = end
      end += 384
      self.chan_pseudoRange = _get_struct_48d().unpack(str[start:end])
      start = end
      end += 384
      self.chan_carrPhase = _get_struct_48d().unpack(str[start:end])
      start = end
      end += 1
      (self.msg_cnt,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_q8B21d().pack(_x.utime, _x.pos_type, _x.meas_enable, _x.GNSS_mask, _x.ant_num, _x.sv_num_tracked, _x.sv_num_used, _x.diff_age, _x.sol_age, _x.ms, _x.longitude, _x.latitude, _x.height, _x.ve, _x.vn, _x.vu, _x.roll, _x.pitch, _x.heading, _x.std_longitude, _x.std_latitude, _x.std_height, _x.std_ve, _x.std_vn, _x.std_vu, _x.std_roll, _x.std_pitch, _x.std_heading, _x.undulation, _x.baseline_length))
      _x = self.chan_valid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_48B().pack(*_x))
      else:
        buff.write(_get_struct_48s().pack(_x))
      _x = self.chan_svid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_48B().pack(*_x))
      else:
        buff.write(_get_struct_48s().pack(_x))
      buff.write(self.chan_plllock.tostring())
      buff.write(self.chan_cn0.tostring())
      buff.write(self.chan_pseudoRange.tostring())
      buff.write(self.chan_carrPhase.tostring())
      _x = self.msg_cnt
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 184
      (_x.utime, _x.pos_type, _x.meas_enable, _x.GNSS_mask, _x.ant_num, _x.sv_num_tracked, _x.sv_num_used, _x.diff_age, _x.sol_age, _x.ms, _x.longitude, _x.latitude, _x.height, _x.ve, _x.vn, _x.vu, _x.roll, _x.pitch, _x.heading, _x.std_longitude, _x.std_latitude, _x.std_height, _x.std_ve, _x.std_vn, _x.std_vu, _x.std_roll, _x.std_pitch, _x.std_heading, _x.undulation, _x.baseline_length,) = _get_struct_q8B21d().unpack(str[start:end])
      start = end
      end += 48
      self.chan_valid = str[start:end]
      start = end
      end += 48
      self.chan_svid = str[start:end]
      start = end
      end += 192
      self.chan_plllock = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=48)
      start = end
      end += 192
      self.chan_cn0 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=48)
      start = end
      end += 384
      self.chan_pseudoRange = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=48)
      start = end
      end += 384
      self.chan_carrPhase = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=48)
      start = end
      end += 1
      (self.msg_cnt,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_48B = None
def _get_struct_48B():
    global _struct_48B
    if _struct_48B is None:
        _struct_48B = struct.Struct("<48B")
    return _struct_48B
_struct_48d = None
def _get_struct_48d():
    global _struct_48d
    if _struct_48d is None:
        _struct_48d = struct.Struct("<48d")
    return _struct_48d
_struct_48f = None
def _get_struct_48f():
    global _struct_48f
    if _struct_48f is None:
        _struct_48f = struct.Struct("<48f")
    return _struct_48f
_struct_48s = None
def _get_struct_48s():
    global _struct_48s
    if _struct_48s is None:
        _struct_48s = struct.Struct("<48s")
    return _struct_48s
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_q8B21d = None
def _get_struct_q8B21d():
    global _struct_q8B21d
    if _struct_q8B21d is None:
        _struct_q8B21d = struct.Struct("<q8B21d")
    return _struct_q8B21d
