# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ins_msg/EkfStatusMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class EkfStatusMsg(genpy.Message):
  _md5sum = "5158c32f409803affa7d895a54503ab0"
  _type = "ins_msg/EkfStatusMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

int64 utime

float64[3] ref
float64[3] obs
float64[3] out

float64[3] state_rpy
float64[3] state_vel
float64[3] state_pos
float64[3] state_gyro_bias
float64[3] state_acc_bias
float64 state_scale
float64 state_yaw_error
float64 state_pitch_error

float64[3] innov_speed
float64[3] innov_rtk_pos
float64[3] innov_rtk_vel
float64 innov_rtk_hdg

float64[3] R_speed
float64[3] R_rtk_pos
float64[3] R_rtk_vel
float64 R_rtk_hdg

float64[18] P

float64 speed_imu_time
float64 speed_rtk_time
float64 delta_imu_time

uint8 msg_cnt


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','utime','ref','obs','out','state_rpy','state_vel','state_pos','state_gyro_bias','state_acc_bias','state_scale','state_yaw_error','state_pitch_error','innov_speed','innov_rtk_pos','innov_rtk_vel','innov_rtk_hdg','R_speed','R_rtk_pos','R_rtk_vel','R_rtk_hdg','P','speed_imu_time','speed_rtk_time','delta_imu_time','msg_cnt']
  _slot_types = ['std_msgs/Header','int64','float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64[3]','float64','float64','float64','float64[3]','float64[3]','float64[3]','float64','float64[3]','float64[3]','float64[3]','float64','float64[18]','float64','float64','float64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,utime,ref,obs,out,state_rpy,state_vel,state_pos,state_gyro_bias,state_acc_bias,state_scale,state_yaw_error,state_pitch_error,innov_speed,innov_rtk_pos,innov_rtk_vel,innov_rtk_hdg,R_speed,R_rtk_pos,R_rtk_vel,R_rtk_hdg,P,speed_imu_time,speed_rtk_time,delta_imu_time,msg_cnt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EkfStatusMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.utime is None:
        self.utime = 0
      if self.ref is None:
        self.ref = [0.] * 3
      if self.obs is None:
        self.obs = [0.] * 3
      if self.out is None:
        self.out = [0.] * 3
      if self.state_rpy is None:
        self.state_rpy = [0.] * 3
      if self.state_vel is None:
        self.state_vel = [0.] * 3
      if self.state_pos is None:
        self.state_pos = [0.] * 3
      if self.state_gyro_bias is None:
        self.state_gyro_bias = [0.] * 3
      if self.state_acc_bias is None:
        self.state_acc_bias = [0.] * 3
      if self.state_scale is None:
        self.state_scale = 0.
      if self.state_yaw_error is None:
        self.state_yaw_error = 0.
      if self.state_pitch_error is None:
        self.state_pitch_error = 0.
      if self.innov_speed is None:
        self.innov_speed = [0.] * 3
      if self.innov_rtk_pos is None:
        self.innov_rtk_pos = [0.] * 3
      if self.innov_rtk_vel is None:
        self.innov_rtk_vel = [0.] * 3
      if self.innov_rtk_hdg is None:
        self.innov_rtk_hdg = 0.
      if self.R_speed is None:
        self.R_speed = [0.] * 3
      if self.R_rtk_pos is None:
        self.R_rtk_pos = [0.] * 3
      if self.R_rtk_vel is None:
        self.R_rtk_vel = [0.] * 3
      if self.R_rtk_hdg is None:
        self.R_rtk_hdg = 0.
      if self.P is None:
        self.P = [0.] * 18
      if self.speed_imu_time is None:
        self.speed_imu_time = 0.
      if self.speed_rtk_time is None:
        self.speed_rtk_time = 0.
      if self.delta_imu_time is None:
        self.delta_imu_time = 0.
      if self.msg_cnt is None:
        self.msg_cnt = 0
    else:
      self.header = std_msgs.msg.Header()
      self.utime = 0
      self.ref = [0.] * 3
      self.obs = [0.] * 3
      self.out = [0.] * 3
      self.state_rpy = [0.] * 3
      self.state_vel = [0.] * 3
      self.state_pos = [0.] * 3
      self.state_gyro_bias = [0.] * 3
      self.state_acc_bias = [0.] * 3
      self.state_scale = 0.
      self.state_yaw_error = 0.
      self.state_pitch_error = 0.
      self.innov_speed = [0.] * 3
      self.innov_rtk_pos = [0.] * 3
      self.innov_rtk_vel = [0.] * 3
      self.innov_rtk_hdg = 0.
      self.R_speed = [0.] * 3
      self.R_rtk_pos = [0.] * 3
      self.R_rtk_vel = [0.] * 3
      self.R_rtk_hdg = 0.
      self.P = [0.] * 18
      self.speed_imu_time = 0.
      self.speed_rtk_time = 0.
      self.delta_imu_time = 0.
      self.msg_cnt = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.utime
      buff.write(_get_struct_q().pack(_x))
      buff.write(_get_struct_3d().pack(*self.ref))
      buff.write(_get_struct_3d().pack(*self.obs))
      buff.write(_get_struct_3d().pack(*self.out))
      buff.write(_get_struct_3d().pack(*self.state_rpy))
      buff.write(_get_struct_3d().pack(*self.state_vel))
      buff.write(_get_struct_3d().pack(*self.state_pos))
      buff.write(_get_struct_3d().pack(*self.state_gyro_bias))
      buff.write(_get_struct_3d().pack(*self.state_acc_bias))
      _x = self
      buff.write(_get_struct_3d().pack(_x.state_scale, _x.state_yaw_error, _x.state_pitch_error))
      buff.write(_get_struct_3d().pack(*self.innov_speed))
      buff.write(_get_struct_3d().pack(*self.innov_rtk_pos))
      buff.write(_get_struct_3d().pack(*self.innov_rtk_vel))
      _x = self.innov_rtk_hdg
      buff.write(_get_struct_d().pack(_x))
      buff.write(_get_struct_3d().pack(*self.R_speed))
      buff.write(_get_struct_3d().pack(*self.R_rtk_pos))
      buff.write(_get_struct_3d().pack(*self.R_rtk_vel))
      _x = self.R_rtk_hdg
      buff.write(_get_struct_d().pack(_x))
      buff.write(_get_struct_18d().pack(*self.P))
      _x = self
      buff.write(_get_struct_3dB().pack(_x.speed_imu_time, _x.speed_rtk_time, _x.delta_imu_time, _x.msg_cnt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.utime,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 24
      self.ref = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.obs = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.out = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.state_rpy = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.state_vel = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.state_pos = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.state_gyro_bias = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.state_acc_bias = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.state_scale, _x.state_yaw_error, _x.state_pitch_error,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.innov_speed = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.innov_rtk_pos = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.innov_rtk_vel = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 8
      (self.innov_rtk_hdg,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 24
      self.R_speed = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.R_rtk_pos = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.R_rtk_vel = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 8
      (self.R_rtk_hdg,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 144
      self.P = _get_struct_18d().unpack(str[start:end])
      _x = self
      start = end
      end += 25
      (_x.speed_imu_time, _x.speed_rtk_time, _x.delta_imu_time, _x.msg_cnt,) = _get_struct_3dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.utime
      buff.write(_get_struct_q().pack(_x))
      buff.write(self.ref.tostring())
      buff.write(self.obs.tostring())
      buff.write(self.out.tostring())
      buff.write(self.state_rpy.tostring())
      buff.write(self.state_vel.tostring())
      buff.write(self.state_pos.tostring())
      buff.write(self.state_gyro_bias.tostring())
      buff.write(self.state_acc_bias.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.state_scale, _x.state_yaw_error, _x.state_pitch_error))
      buff.write(self.innov_speed.tostring())
      buff.write(self.innov_rtk_pos.tostring())
      buff.write(self.innov_rtk_vel.tostring())
      _x = self.innov_rtk_hdg
      buff.write(_get_struct_d().pack(_x))
      buff.write(self.R_speed.tostring())
      buff.write(self.R_rtk_pos.tostring())
      buff.write(self.R_rtk_vel.tostring())
      _x = self.R_rtk_hdg
      buff.write(_get_struct_d().pack(_x))
      buff.write(self.P.tostring())
      _x = self
      buff.write(_get_struct_3dB().pack(_x.speed_imu_time, _x.speed_rtk_time, _x.delta_imu_time, _x.msg_cnt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.utime,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 24
      self.ref = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.obs = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.out = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.state_rpy = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.state_vel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.state_pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.state_gyro_bias = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.state_acc_bias = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 24
      (_x.state_scale, _x.state_yaw_error, _x.state_pitch_error,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.innov_speed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.innov_rtk_pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.innov_rtk_vel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 8
      (self.innov_rtk_hdg,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 24
      self.R_speed = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.R_rtk_pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.R_rtk_vel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 8
      (self.R_rtk_hdg,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 144
      self.P = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=18)
      _x = self
      start = end
      end += 25
      (_x.speed_imu_time, _x.speed_rtk_time, _x.delta_imu_time, _x.msg_cnt,) = _get_struct_3dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_18d = None
def _get_struct_18d():
    global _struct_18d
    if _struct_18d is None:
        _struct_18d = struct.Struct("<18d")
    return _struct_18d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3dB = None
def _get_struct_3dB():
    global _struct_3dB
    if _struct_3dB is None:
        _struct_3dB = struct.Struct("<3dB")
    return _struct_3dB
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
