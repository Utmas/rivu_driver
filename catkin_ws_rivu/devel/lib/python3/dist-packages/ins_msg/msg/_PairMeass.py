# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ins_msg/PairMeass.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PairMeass(genpy.Message):
  _md5sum = "776a952d5c4aa0b600c75e49a23de2f6"
  _type = "ins_msg/PairMeass"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
uint16      swarm_id
uint8       node_id
uint8       los_flag
uint64[2]   stamps

uint16      distance
int16       aoa
int16       pdoa1
int16       pdoa2

"""
  __slots__ = ['swarm_id','node_id','los_flag','stamps','distance','aoa','pdoa1','pdoa2']
  _slot_types = ['uint16','uint8','uint8','uint64[2]','uint16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       swarm_id,node_id,los_flag,stamps,distance,aoa,pdoa1,pdoa2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PairMeass, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.swarm_id is None:
        self.swarm_id = 0
      if self.node_id is None:
        self.node_id = 0
      if self.los_flag is None:
        self.los_flag = 0
      if self.stamps is None:
        self.stamps = [0] * 2
      if self.distance is None:
        self.distance = 0
      if self.aoa is None:
        self.aoa = 0
      if self.pdoa1 is None:
        self.pdoa1 = 0
      if self.pdoa2 is None:
        self.pdoa2 = 0
    else:
      self.swarm_id = 0
      self.node_id = 0
      self.los_flag = 0
      self.stamps = [0] * 2
      self.distance = 0
      self.aoa = 0
      self.pdoa1 = 0
      self.pdoa2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H2B().pack(_x.swarm_id, _x.node_id, _x.los_flag))
      buff.write(_get_struct_2Q().pack(*self.stamps))
      _x = self
      buff.write(_get_struct_H3h().pack(_x.distance, _x.aoa, _x.pdoa1, _x.pdoa2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.swarm_id, _x.node_id, _x.los_flag,) = _get_struct_H2B().unpack(str[start:end])
      start = end
      end += 16
      self.stamps = _get_struct_2Q().unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.distance, _x.aoa, _x.pdoa1, _x.pdoa2,) = _get_struct_H3h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H2B().pack(_x.swarm_id, _x.node_id, _x.los_flag))
      buff.write(self.stamps.tostring())
      _x = self
      buff.write(_get_struct_H3h().pack(_x.distance, _x.aoa, _x.pdoa1, _x.pdoa2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.swarm_id, _x.node_id, _x.los_flag,) = _get_struct_H2B().unpack(str[start:end])
      start = end
      end += 16
      self.stamps = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=2)
      _x = self
      start = end
      end += 8
      (_x.distance, _x.aoa, _x.pdoa1, _x.pdoa2,) = _get_struct_H3h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_H2B = None
def _get_struct_H2B():
    global _struct_H2B
    if _struct_H2B is None:
        _struct_H2B = struct.Struct("<H2B")
    return _struct_H2B
_struct_H3h = None
def _get_struct_H3h():
    global _struct_H3h
    if _struct_H3h is None:
        _struct_H3h = struct.Struct("<H3h")
    return _struct_H3h
